//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.mutation_create_review.type;

import com.apollographql.apollo3.api.Optional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Date;
import java.util.List;

/**
 * The input object sent when someone is creating a new review
 */
public class ReviewInput {
  public final Integer stars;

  public final Optional<Integer> nullableIntFieldWithDefaultValue;

  public final Optional<String> commentary;

  public final ColorInput favoriteColor;

  public final Optional<Episode> enumWithDefaultValue;

  public final Optional<Episode> nonNullableEnumWithDefaultValue;

  public final Optional<Episode> nullableEnum;

  public final Optional<List<Date>> listOfCustomScalar;

  public final Optional<Date> customScalar;

  public final Optional<List<Episode>> listOfEnums;

  public final Optional<List<Integer>> listOfInt;

  public final Optional<List<String>> listOfString;

  public final List<String> listOfStringNonOptional;

  public final Optional<List<ColorInput>> listOfInputTypes;

  public final Optional<Boolean> booleanWithDefaultValue;

  public final Optional<Boolean> booleanNonOptional;

  public final Optional<List<List<String>>> listOfListOfString;

  public final Optional<List<List<Episode>>> listOfListOfEnum;

  public final Optional<List<List<Date>>> listOfListOfCustom;

  public final Optional<List<List<ColorInput>>> listOfListOfObject;

  public final Optional<String> CapitalizedField;

  public final Optional<Integer> CapitalizedInt;

  public ReviewInput(Integer stars, Optional<Integer> nullableIntFieldWithDefaultValue,
      Optional<String> commentary, ColorInput favoriteColor, Optional<Episode> enumWithDefaultValue,
      Optional<Episode> nonNullableEnumWithDefaultValue, Optional<Episode> nullableEnum,
      Optional<List<Date>> listOfCustomScalar, Optional<Date> customScalar,
      Optional<List<Episode>> listOfEnums, Optional<List<Integer>> listOfInt,
      Optional<List<String>> listOfString, List<String> listOfStringNonOptional,
      Optional<List<ColorInput>> listOfInputTypes, Optional<Boolean> booleanWithDefaultValue,
      Optional<Boolean> booleanNonOptional, Optional<List<List<String>>> listOfListOfString,
      Optional<List<List<Episode>>> listOfListOfEnum, Optional<List<List<Date>>> listOfListOfCustom,
      Optional<List<List<ColorInput>>> listOfListOfObject, Optional<String> CapitalizedField,
      Optional<Integer> CapitalizedInt) {
    this.stars = stars;
    this.nullableIntFieldWithDefaultValue = nullableIntFieldWithDefaultValue;
    this.commentary = commentary;
    this.favoriteColor = favoriteColor;
    this.enumWithDefaultValue = enumWithDefaultValue;
    this.nonNullableEnumWithDefaultValue = nonNullableEnumWithDefaultValue;
    this.nullableEnum = nullableEnum;
    this.listOfCustomScalar = listOfCustomScalar;
    this.customScalar = customScalar;
    this.listOfEnums = listOfEnums;
    this.listOfInt = listOfInt;
    this.listOfString = listOfString;
    this.listOfStringNonOptional = listOfStringNonOptional;
    this.listOfInputTypes = listOfInputTypes;
    this.booleanWithDefaultValue = booleanWithDefaultValue;
    this.booleanNonOptional = booleanNonOptional;
    this.listOfListOfString = listOfListOfString;
    this.listOfListOfEnum = listOfListOfEnum;
    this.listOfListOfCustom = listOfListOfCustom;
    this.listOfListOfObject = listOfListOfObject;
    this.CapitalizedField = CapitalizedField;
    this.CapitalizedInt = CapitalizedInt;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Integer stars;

    private Optional<Integer> nullableIntFieldWithDefaultValue = Optional.absent();

    private Optional<String> commentary = Optional.absent();

    private ColorInput favoriteColor;

    private Optional<Episode> enumWithDefaultValue = Optional.absent();

    private Optional<Episode> nonNullableEnumWithDefaultValue = Optional.absent();

    private Optional<Episode> nullableEnum = Optional.absent();

    private Optional<List<Date>> listOfCustomScalar = Optional.absent();

    private Optional<Date> customScalar = Optional.absent();

    private Optional<List<Episode>> listOfEnums = Optional.absent();

    private Optional<List<Integer>> listOfInt = Optional.absent();

    private Optional<List<String>> listOfString = Optional.absent();

    private List<String> listOfStringNonOptional;

    private Optional<List<ColorInput>> listOfInputTypes = Optional.absent();

    private Optional<Boolean> booleanWithDefaultValue = Optional.absent();

    private Optional<Boolean> booleanNonOptional = Optional.absent();

    private Optional<List<List<String>>> listOfListOfString = Optional.absent();

    private Optional<List<List<Episode>>> listOfListOfEnum = Optional.absent();

    private Optional<List<List<Date>>> listOfListOfCustom = Optional.absent();

    private Optional<List<List<ColorInput>>> listOfListOfObject = Optional.absent();

    private Optional<String> CapitalizedField = Optional.absent();

    private Optional<Integer> CapitalizedInt = Optional.absent();

    Builder() {
    }

    /**
     * 0-5 stars
     */
    public Builder stars(Integer stars) {
      this.stars = stars;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nullableIntFieldWithDefaultValue(Integer nullableIntFieldWithDefaultValue) {
      this.nullableIntFieldWithDefaultValue = Optional.present(nullableIntFieldWithDefaultValue);
      return this;
    }

    /**
     * Comment about the movie, optional
     */
    public Builder commentary(String commentary) {
      this.commentary = Optional.present(commentary);
      return this;
    }

    /**
     * Favorite color, optional
     */
    public Builder favoriteColor(ColorInput favoriteColor) {
      this.favoriteColor = favoriteColor;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder enumWithDefaultValue(Episode enumWithDefaultValue) {
      this.enumWithDefaultValue = Optional.present(enumWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nonNullableEnumWithDefaultValue(Episode nonNullableEnumWithDefaultValue) {
      this.nonNullableEnumWithDefaultValue = Optional.present(nonNullableEnumWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nullableEnum(Episode nullableEnum) {
      this.nullableEnum = Optional.present(nullableEnum);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfCustomScalar(List<Date> listOfCustomScalar) {
      this.listOfCustomScalar = Optional.present(listOfCustomScalar);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder customScalar(Date customScalar) {
      this.customScalar = Optional.present(customScalar);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfEnums(List<Episode> listOfEnums) {
      this.listOfEnums = Optional.present(listOfEnums);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfInt(List<Integer> listOfInt) {
      this.listOfInt = Optional.present(listOfInt);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfString(List<String> listOfString) {
      this.listOfString = Optional.present(listOfString);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfStringNonOptional(List<String> listOfStringNonOptional) {
      this.listOfStringNonOptional = listOfStringNonOptional;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfInputTypes(List<ColorInput> listOfInputTypes) {
      this.listOfInputTypes = Optional.present(listOfInputTypes);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder booleanWithDefaultValue(Boolean booleanWithDefaultValue) {
      this.booleanWithDefaultValue = Optional.present(booleanWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder booleanNonOptional(Boolean booleanNonOptional) {
      this.booleanNonOptional = Optional.present(booleanNonOptional);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfString(List<List<String>> listOfListOfString) {
      this.listOfListOfString = Optional.present(listOfListOfString);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfEnum(List<List<Episode>> listOfListOfEnum) {
      this.listOfListOfEnum = Optional.present(listOfListOfEnum);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfCustom(List<List<Date>> listOfListOfCustom) {
      this.listOfListOfCustom = Optional.present(listOfListOfCustom);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfObject(List<List<ColorInput>> listOfListOfObject) {
      this.listOfListOfObject = Optional.present(listOfListOfObject);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder CapitalizedField(String CapitalizedField) {
      this.CapitalizedField = Optional.present(CapitalizedField);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder CapitalizedInt(Integer CapitalizedInt) {
      this.CapitalizedInt = Optional.present(CapitalizedInt);
      return this;
    }

    public ReviewInput build() {
      return new ReviewInput(stars, nullableIntFieldWithDefaultValue, commentary, favoriteColor, enumWithDefaultValue, nonNullableEnumWithDefaultValue, nullableEnum, listOfCustomScalar, customScalar, listOfEnums, listOfInt, listOfString, listOfStringNonOptional, listOfInputTypes, booleanWithDefaultValue, booleanNonOptional, listOfListOfString, listOfListOfEnum, listOfListOfCustom, listOfListOfObject, CapitalizedField, CapitalizedInt);
    }
  }
}
