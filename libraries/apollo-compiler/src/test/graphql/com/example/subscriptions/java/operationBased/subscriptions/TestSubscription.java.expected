//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.subscriptions;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Subscription;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.subscriptions.adapter.TestSubscription_ResponseAdapter;
import com.example.subscriptions.adapter.TestSubscription_VariablesAdapter;
import com.example.subscriptions.selections.TestSubscriptionSelections;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;

public class TestSubscription implements Subscription<TestSubscription.Data> {
  public static final String OPERATION_ID = "f053ee1afe42260f1511e417b6133f1cb8507c185e2e7b4e1e579696dbc8f2af";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * subscription TestSubscription($repo: String!) {
   *   commentAdded(repoFullName: $repo) {
   *     id
   *     content
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "subscription TestSubscription($repo: String!) { commentAdded(repoFullName: $repo) { id content } }";

  public static final String OPERATION_NAME = "TestSubscription";

  public final String repo;

  public TestSubscription(String repo) {
    this.repo = repo;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    TestSubscription_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withBooleanDefaultValues);
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestSubscription_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.subscriptions.type.Subscription.type
    )
    .selections(TestSubscriptionSelections.__root)
    .build();
  }

  public static final class Builder {
    private String repo;

    Builder() {
    }

    public Builder repo(String repo) {
      this.repo = repo;
      return this;
    }

    public TestSubscription build() {
      return new TestSubscription(repo);
    }
  }

  public static class Data implements Subscription.Data {
    /**
     * Subscription fires on every comment added
     */
    public CommentAdded commentAdded;

    public Data(CommentAdded commentAdded) {
      this.commentAdded = commentAdded;
    }
  }

  public static class CommentAdded {
    /**
     * The SQL ID of this entry
     */
    public Integer id;

    /**
     * The text of the comment
     */
    public String content;

    public CommentAdded(Integer id, String content) {
      this.id = id;
      this.content = content;
    }
  }
}
