//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_jetbrains_annotations;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_jetbrains_annotations.adapter.MyQuery_ResponseAdapter;
import com.example.java_jetbrains_annotations.adapter.MyQuery_VariablesAdapter;
import com.example.java_jetbrains_annotations.selections.MyQuerySelections;
import com.example.java_jetbrains_annotations.type.MyInput;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public class MyQuery implements Query<MyQuery.Data> {
  public static final String OPERATION_ID = "c9a856ba761821117e6a30df290b1259be46190a67a93d351fe3a648a4713435";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query MyQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = {
   *   nonNullableInt: 4
   * }
   *  ) {
   *   nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   *   nonNullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   *   nullableListOfNullableString
   *   nullableListOfNonNullableString
   * }
   */
  public static final String OPERATION_DOCUMENT = "query MyQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = { nonNullableInt: 4 } ) { nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nullableMyType { nullableInt nonNullableInt } nonNullableMyType { nullableInt nonNullableInt } nullableListOfNullableString nullableListOfNonNullableString }";

  public static final String OPERATION_NAME = "MyQuery";

  @NotNull
  public final Optional<@Nullable Integer> nullableInt;

  public final int nonNullableInt;

  @NotNull
  public final Optional<Integer> nonNullableIntWithDefault;

  @NotNull
  public final Optional<@Nullable MyInput> nullableInput;

  @NotNull
  public final MyInput nonNullableInput;

  @NotNull
  public final Optional<@NotNull MyInput> nonNullableInputWithDefault;

  public MyQuery(@NotNull Optional<@Nullable Integer> nullableInt, int nonNullableInt,
      @NotNull Optional<Integer> nonNullableIntWithDefault,
      @NotNull Optional<@Nullable MyInput> nullableInput, @NotNull MyInput nonNullableInput,
      @NotNull Optional<@NotNull MyInput> nonNullableInputWithDefault) {
    this.nullableInt = nullableInt;
    this.nonNullableInt = nonNullableInt;
    this.nonNullableIntWithDefault = nonNullableIntWithDefault;
    this.nullableInput = nullableInput;
    this.nonNullableInput = nonNullableInput;
    this.nonNullableInputWithDefault = nonNullableInputWithDefault;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    MyQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withBooleanDefaultValues);
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(MyQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.java_jetbrains_annotations.type.Query.type
    )
    .selections(MyQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Optional<@Nullable Integer> nullableInt = Optional.absent();

    private int nonNullableInt;

    private Optional<Integer> nonNullableIntWithDefault = Optional.absent();

    private Optional<@Nullable MyInput> nullableInput = Optional.absent();

    private MyInput nonNullableInput;

    private Optional<@NotNull MyInput> nonNullableInputWithDefault = Optional.absent();

    Builder() {
    }

    public Builder nullableInt(@Nullable Integer nullableInt) {
      this.nullableInt = Optional.present(nullableInt);
      return this;
    }

    public Builder nonNullableInt(int nonNullableInt) {
      this.nonNullableInt = nonNullableInt;
      return this;
    }

    public Builder nonNullableIntWithDefault(Integer nonNullableIntWithDefault) {
      this.nonNullableIntWithDefault = Optional.present(nonNullableIntWithDefault);
      return this;
    }

    public Builder nullableInput(@Nullable MyInput nullableInput) {
      this.nullableInput = Optional.present(nullableInput);
      return this;
    }

    public Builder nonNullableInput(@NotNull MyInput nonNullableInput) {
      this.nonNullableInput = nonNullableInput;
      return this;
    }

    public Builder nonNullableInputWithDefault(@NotNull MyInput nonNullableInputWithDefault) {
      this.nonNullableInputWithDefault = Optional.present(nonNullableInputWithDefault);
      return this;
    }

    public MyQuery build() {
      return new MyQuery(nullableInt, nonNullableInt, nonNullableIntWithDefault, nullableInput, nonNullableInput, nonNullableInputWithDefault);
    }
  }

  public static class Data implements Query.Data {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    @Nullable
    public NullableMyType nullableMyType;

    @NotNull
    public NonNullableMyType nonNullableMyType;

    @Nullable
    public List<@Nullable String> nullableListOfNullableString;

    @Nullable
    public List<@NotNull String> nullableListOfNonNullableString;

    public Data(@Nullable Integer nullableInt, int nonNullableInt,
        @Nullable NullableMyType nullableMyType, @NotNull NonNullableMyType nonNullableMyType,
        @Nullable List<@Nullable String> nullableListOfNullableString,
        @Nullable List<@NotNull String> nullableListOfNonNullableString) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
      this.nullableMyType = nullableMyType;
      this.nonNullableMyType = nonNullableMyType;
      this.nullableListOfNullableString = nullableListOfNullableString;
      this.nullableListOfNonNullableString = nullableListOfNonNullableString;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      builder.nullableMyType = nullableMyType;
      builder.nonNullableMyType = nonNullableMyType;
      builder.nullableListOfNullableString = nullableListOfNullableString;
      builder.nullableListOfNonNullableString = nullableListOfNonNullableString;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      private NullableMyType nullableMyType;

      private NonNullableMyType nonNullableMyType;

      private List<@Nullable String> nullableListOfNullableString;

      private List<@NotNull String> nullableListOfNonNullableString;

      Builder() {
      }

      public Builder nullableInt(@Nullable Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public Builder nullableMyType(@Nullable NullableMyType nullableMyType) {
        this.nullableMyType = nullableMyType;
        return this;
      }

      public Builder nonNullableMyType(@NotNull NonNullableMyType nonNullableMyType) {
        this.nonNullableMyType = nonNullableMyType;
        return this;
      }

      public Builder nullableListOfNullableString(
          @Nullable List<@Nullable String> nullableListOfNullableString) {
        this.nullableListOfNullableString = nullableListOfNullableString;
        return this;
      }

      public Builder nullableListOfNonNullableString(
          @Nullable List<@NotNull String> nullableListOfNonNullableString) {
        this.nullableListOfNonNullableString = nullableListOfNonNullableString;
        return this;
      }

      public Data build() {
        return new Data(nullableInt, nonNullableInt, nullableMyType, nonNullableMyType, nullableListOfNullableString, nullableListOfNonNullableString);
      }
    }
  }

  public static class NullableMyType {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    public NullableMyType(@Nullable Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      Builder() {
      }

      public Builder nullableInt(@Nullable Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public NullableMyType build() {
        return new NullableMyType(nullableInt, nonNullableInt);
      }
    }
  }

  public static class NonNullableMyType {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    public NonNullableMyType(@Nullable Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      Builder() {
      }

      public Builder nullableInt(@Nullable Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public NonNullableMyType build() {
        return new NonNullableMyType(nullableInt, nonNullableInt);
      }
    }
  }
}
