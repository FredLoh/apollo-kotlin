//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.antlr_tokens;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.antlr_tokens.adapter.TestQuery_ResponseAdapter;
import com.example.antlr_tokens.adapter.TestQuery_VariablesAdapter;
import com.example.antlr_tokens.selections.TestQuerySelections;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "197e186cfb461d1c38c0be4da7b182eff42e304043973b994c8c2de3535daea6";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery($operation: String) {
   *   typeWithGraphQLKeywords {
   *     on
   *     null(fragment: $operation)
   *     alias: null(fragment: "A string\nwith a new line")
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery($operation: String) { typeWithGraphQLKeywords { on null(fragment: $operation) alias: null(fragment: \"A string\\nwith a new line\") } }";

  public static final String OPERATION_NAME = "TestQuery";

  public final Optional<String> operation;

  public TestQuery(Optional<String> operation) {
    this.operation = operation;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    TestQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withBooleanDefaultValues);
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.antlr_tokens.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Optional<String> operation = Optional.absent();

    Builder() {
    }

    public Builder operation(String operation) {
      this.operation = Optional.present(operation);
      return this;
    }

    public TestQuery build() {
      return new TestQuery(operation);
    }
  }

  public static class Data implements Query.Data {
    public TypeWithGraphQLKeywords typeWithGraphQLKeywords;

    public Data(TypeWithGraphQLKeywords typeWithGraphQLKeywords) {
      this.typeWithGraphQLKeywords = typeWithGraphQLKeywords;
    }
  }

  public static class TypeWithGraphQLKeywords {
    public String on;

    public String null_;

    public String alias;

    public TypeWithGraphQLKeywords(String on, String null_, String alias) {
      this.on = on;
      this.null_ = null_;
      this.alias = alias;
    }
  }
}
