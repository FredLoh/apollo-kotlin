//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.field_with_include_directive;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.field_with_include_directive.adapter.TestQuery_ResponseAdapter;
import com.example.field_with_include_directive.adapter.TestQuery_VariablesAdapter;
import com.example.field_with_include_directive.selections.TestQuerySelections;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "7d815b13df95ab484c7b20cb8059c07e3a8688d1ea0a251bff6d3f0b6fdb1cb7";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery($includeName: Boolean!, $skipFriends: Boolean!) @operationDirective(dummy: "hello") {
   *   hero {
   *     name @include(if: $includeName)
   *     friendsConnection @skip(if: $skipFriends) {
   *       totalCount
   *     }
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery($includeName: Boolean!, $skipFriends: Boolean!) @operationDirective(dummy: \"hello\") { hero { name @include(if: $includeName) friendsConnection @skip(if: $skipFriends) { totalCount } } }";

  public static final String OPERATION_NAME = "TestQuery";

  public final Boolean includeName;

  public final Boolean skipFriends;

  public TestQuery(Boolean includeName, Boolean skipFriends) {
    this.includeName = includeName;
    this.skipFriends = skipFriends;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    TestQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withBooleanDefaultValues);
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.field_with_include_directive.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Boolean includeName;

    private Boolean skipFriends;

    Builder() {
    }

    public Builder includeName(Boolean includeName) {
      this.includeName = includeName;
      return this;
    }

    public Builder skipFriends(Boolean skipFriends) {
      this.skipFriends = skipFriends;
      return this;
    }

    public TestQuery build() {
      return new TestQuery(includeName, skipFriends);
    }
  }

  public static class Data implements Query.Data {
    public Hero hero;

    public Data(Hero hero) {
      this.hero = hero;
    }
  }

  public static class Hero {
    /**
     * The name of the character
     */
    public String name;

    /**
     * The friends of the character exposed as a connection with edges
     */
    public FriendsConnection friendsConnection;

    public Hero(String name, FriendsConnection friendsConnection) {
      this.name = name;
      this.friendsConnection = friendsConnection;
    }
  }

  public static class FriendsConnection {
    /**
     * The total number of friends
     */
    public Integer totalCount;

    public FriendsConnection(Integer totalCount) {
      this.totalCount = totalCount;
    }
  }
}
