//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.introspection_query.adapter.TestQuery_ResponseAdapter;
import com.example.introspection_query.selections.TestQuerySelections;
import com.example.introspection_query.type.__TypeKind;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "2bf29cc74f10b0b5551a609396f4e489fc4ebce15c0504cdd102be8447976b97";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery {
   *   __schema {
   *     queryType {
   *       name
   *     }
   *     types {
   *       name
   *     }
   *   }
   *   __type(name: "Vehicle") {
   *     name
   *     kind
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery { __schema { queryType { name } types { name } } __type(name: \"Vehicle\") { name kind } }";

  public static final String OPERATION_NAME = "TestQuery";

  public TestQuery() {

  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    // This operation doesn't have any variable
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.introspection_query.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    Builder() {
    }

    public TestQuery build() {
      return new TestQuery();
    }
  }

  public static class Data implements Query.Data {
    public __Schema __schema;

    public __Type __type;

    public Data(__Schema __schema, __Type __type) {
      this.__schema = __schema;
      this.__type = __type;
    }
  }

  public static class __Schema {
    public QueryType queryType;

    public List<Type> types;

    public __Schema(QueryType queryType, List<Type> types) {
      this.queryType = queryType;
      this.types = types;
    }
  }

  public static class QueryType {
    public String name;

    public QueryType(String name) {
      this.name = name;
    }
  }

  public static class Type {
    public String name;

    public Type(String name) {
      this.name = name;
    }
  }

  public static class __Type {
    public String name;

    public __TypeKind kind;

    public __Type(String name, __TypeKind kind) {
      this.name = name;
      this.kind = kind;
    }
  }
}
