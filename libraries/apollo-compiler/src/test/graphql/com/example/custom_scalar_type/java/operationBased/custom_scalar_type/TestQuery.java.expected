//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.custom_scalar_type;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.custom_scalar_type.adapter.TestQuery_ResponseAdapter;
import com.example.custom_scalar_type.selections.TestQuerySelections;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Date;
import java.util.List;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "1d5498a23394700442413af8ec1b8edce1445ce533afdb2e9d5ec9c0ed40a9e3";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery {
   *   hero {
   *     id
   *     name
   *     birthDate
   *     appearanceDates
   *     fieldWithUnsupportedType
   *     profileLink
   *     links
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery { hero { id name birthDate appearanceDates fieldWithUnsupportedType profileLink links } }";

  public static final String OPERATION_NAME = "TestQuery";

  public TestQuery() {

  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    // This operation doesn't have any variable
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.custom_scalar_type.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    Builder() {
    }

    public TestQuery build() {
      return new TestQuery();
    }
  }

  public static class Data implements Query.Data {
    public Hero hero;

    public Data(Hero hero) {
      this.hero = hero;
    }
  }

  public static class Hero {
    /**
     * The ID of the character
     */
    public Long id;

    /**
     * The name of the character
     */
    public String name;

    /**
     * The date character was born.
     */
    public Date birthDate;

    /**
     * The dates of appearances
     */
    public List<Date> appearanceDates;

    /**
     * The date character was born.
     */
    public Object fieldWithUnsupportedType;

    /**
     * Profile link
     */
    public String profileLink;

    /**
     * Links
     */
    public List<String> links;

    public Hero(Long id, String name, Date birthDate, List<Date> appearanceDates,
        Object fieldWithUnsupportedType, String profileLink, List<String> links) {
      this.id = id;
      this.name = name;
      this.birthDate = birthDate;
      this.appearanceDates = appearanceDates;
      this.fieldWithUnsupportedType = fieldWithUnsupportedType;
      this.profileLink = profileLink;
      this.links = links;
    }
  }
}
