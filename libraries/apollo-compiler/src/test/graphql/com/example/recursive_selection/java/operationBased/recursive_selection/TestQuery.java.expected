//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.recursive_selection;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.recursive_selection.adapter.TestQuery_ResponseAdapter;
import com.example.recursive_selection.selections.TestQuerySelections;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "0308cbb678ba65068f98c1e2db76c79bc46b6d4a171d6310a4bb5d98356651c5";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery {
   *   tree {
   *     name
   *     children {
   *       name
   *     }
   *     parent {
   *       name
   *     }
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery { tree { name children { name } parent { name } } }";

  public static final String OPERATION_NAME = "TestQuery";

  public TestQuery() {

  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    // This operation doesn't have any variable
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.recursive_selection.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    Builder() {
    }

    public TestQuery build() {
      return new TestQuery();
    }
  }

  public static class Data implements Query.Data {
    public Tree tree;

    public Data(Tree tree) {
      this.tree = tree;
    }
  }

  public static class Tree {
    public String name;

    public List<Child> children;

    public Parent parent;

    public Tree(String name, List<Child> children, Parent parent) {
      this.name = name;
      this.children = children;
      this.parent = parent;
    }
  }

  public static class Child {
    public String name;

    public Child(String name) {
      this.name = name;
    }
  }

  public static class Parent {
    public String name;

    public Parent(String name) {
      this.name = name;
    }
  }
}
