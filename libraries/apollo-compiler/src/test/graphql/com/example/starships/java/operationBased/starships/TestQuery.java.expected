//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.starships;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.starships.adapter.TestQuery_ResponseAdapter;
import com.example.starships.adapter.TestQuery_VariablesAdapter;
import com.example.starships.selections.TestQuerySelections;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class TestQuery implements Query<TestQuery.Data> {
  public static final String OPERATION_ID = "ec95d84c104260ea1c99e15341279aaabe98b7364279c2886a9ffe9adfeefb7f";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TestQuery($id: ID!) {
   *   starship(id: $id) {
   *     id
   *     name
   *     coordinates
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TestQuery($id: ID!) { starship(id: $id) { id name coordinates } }";

  public static final String OPERATION_NAME = "TestQuery";

  public final String id;

  public TestQuery(String id) {
    this.id = id;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withBooleanDefaultValues) throws IOException {
    TestQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withBooleanDefaultValues);
  }

  @Override
  public CompositeAdapter<Data> adapter() {
    return new ObjectCompositeAdapter<Data>(TestQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.starships.type.Query.type
    )
    .selections(TestQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private String id;

    Builder() {
    }

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public TestQuery build() {
      return new TestQuery(id);
    }
  }

  public static class Data implements Query.Data {
    public Starship starship;

    public Data(Starship starship) {
      this.starship = starship;
    }
  }

  public static class Starship {
    /**
     * The ID of the starship
     */
    public String id;

    /**
     * The name of the starship
     */
    public String name;

    public List<List<Double>> coordinates;

    public Starship(String id, String name, List<List<Double>> coordinates) {
      this.id = id;
      this.name = name;
      this.coordinates = coordinates;
    }
  }
}
